[{"categories":["tool"],"contents":"休日を1日消費してアプリ作りしてみた めちゃ楽しくはないけど、そこそこ意外と楽しい。 良い趣味になるかも。\nやったこと  Flutterのインストール Flutter公式ドキュメントを読む デモアプリ（Startup namer）の作成 Udemy ×1 Udacity ×1  公式ドキュメントが丁寧だから、書いてある通りやったら何も問題がなかった。\nStartup namerアプリの概要  ドキュメントに載っている「最初に作ってみよう！」っていうやつ  Part1とPart2があってどっちもやった。 英単語辞書（english_wordsパッケージ）からランダムに２単語抽出して繋げて表示する機能 気に入った単語はお気に入り保存できる機能  簡単 Swift挫折した人でもいけるかも。最近のツールはプログラミング言語もそうだけど、用意されているものが豊富で凄い気が。（＝高レイヤーは使い方覚えるだけなので、できる人が増えてしまう）\n完璧に理解する気はないけど、簡単なアプリなら作れそう〜\nStateに触れるのはReact1回に次いで2回目だったけど、そのうち使いこなせるようになるんかなー\n","permalink":"https://stardust-coder.github.io/apblog/blog/post-8/","tags":["programming","App","Flutter"],"title":"はじめてのFlutter"},{"categories":["tool"],"contents":"はじめてのGoogle Analytics 無料で使えるアクセス解析ツール\n見れるデータ ほぼ全部。代表的なものは\n PV数：ページ表示回数 セッション数：流入〜離脱回数（30分で新セッション開始） 滞在時間：ページに滞在した平均時間  メニューバー ホーム・カスタム・リアルタイム\nユーザ・集客・行動・コンバージョン だれが・どこから来て・どのページをみて・何をしたか\nアトリビューション\nGoogle Analyticsはどうやってアクセスを解析してるの？ HTMLにJavascriptのタグが記述してある。 全ページに計測タグが必要。ないとセッションが途切れて正確な回数がカウントできなくなる。\n流入元判定 Organic Search, Paid Search, Social, Referral, etc. 公式\nGoogle Analytics用パラメータ パラメータとは、URLの末尾についている「？」が入っている文字列\nmedium（メディア） + source（参照元） + campaign（キャンペーン） + term（キーワード） + content（広告のコンテンツ）から成る。\n","permalink":"https://stardust-coder.github.io/apblog/blog/post-6/","tags":null,"title":" GoogleAnalytics使い方メモ"},{"categories":["tool"],"contents":"","permalink":"https://stardust-coder.github.io/apblog/blog/post-7/","tags":null,"title":"Webサイトをみてもらうには"},{"categories":["class"],"contents":"シリコン神経ネットワークとは 電子回路上でのNN\nニューロモルフィックハードウェア\n工学 + 脳科学 + 医療\nDLとの違い！！！\n 神経スパイクを用いて情報伝達。ローパスフィルタ的なところも忠実に再現。 DLは脳からinspirationはもらって進化はしてきたが、再現しているわけではない  シリコン神経ネットワークAI  脳と「互換性(compatibility)」のあるシステム -\u0026gt; 言語・記号を介さずに脳と直接コミュニケーション DLより短いラーニングプロセス, 低消費電力 壊れても勝手に治るコンピュータ（Adult Neurogenesisに対応） 進化するAI  どういった研究があるか  海馬損傷とかにたいして埋め込むデバイス 脳シミュレータ ハイブリッド  これまでのプロジェクト  SyNAPSE(IBM) BrainScaleS(ヒューマンブレインプロジェクトより出資) SpiNNaker スピナカー：商用化済 BrainBow（ボルドー第一代大ら）：医療等 MLKVTH（東大）  断崖絶壁  1940s-50s シナプスの性質 最近 fMRI, CTなどにより高次処理情報もわかるように Micro Circuitの情報処理がわからない。シナプスが再現で作れても、Micro Circuitの作り方がわからないという。。。 100%再現できるわけはないから必須のところがどこであるかが解明される必要がある \u0026lt;- 鳥のマネをして飛ぶのに、揚力だけ真似ればOKみたいな話かな\u0026hellip;?  ","permalink":"https://stardust-coder.github.io/apblog/blog/post-4/","tags":["computer science","neural science"],"title":"シリコンニューラルネットワーク"},{"categories":["class"],"contents":"TSP サンタさん。\nThm. 枝のコストがmetricだと、多項式時間1/2-近似アルゴリズムが存在。 どんなアルゴリズム？\n Gの最小全域木Tの枝を二重にしたグラフG\u0026rsquo;を作る G\u0026rsquo;のオイラー閉路Xを作る. TSPの解は、Xでの順番でGの全点を訪れるツアー 1/2-近似？ OPT \u0026gt;= OPTから枝を１本取り除いた全域木のコスト \u0026gt;= c(T) c(X) = 2c(T) c(C) \u0026lt;= c(X) (metric) c(C) \u0026lt;= 2OPT = 1/(1-1/2) OPT qed.  Thm. 枝のコストがmetricだと、多項式時間1/3-近似アルゴリズムが存在。 【最近！】\nTSPとTSP(D) TSPは最短ツアーを求める問題。 TSP(D)はある整数B以下のツアーがあるか決定する問題。\nTSPとTSP(D)の関係 TSPが解けたら、TSP(D)は解ける。あたりまえ。\n逆は？実は\nTSP(D)を多項式回解けば、TSPの解がもとまる。\n補題：HAMILTON PATH ∝ TSP(D) ハミルトンパス問題のグラフをGとする。 Gの枝(i,j)があるときdij=1, ないときdij=2, として隣接距離（対称）行列Dをつくる。B = n+1とする。\nTSP(D)を解いて、長さn+1以下のツアーがあると判定された -\u0026gt; パスn本で長さn+1だから、長さ2の枝は高々1本 -\u0026gt; そのツアーの中では長さ1のパスをn-1本連続で通っている。 -\u0026gt; それってハミルトンパスになっている。\n・問題の変換はO(logn)\nNP NPは全てSATに帰着できる。\nSATとは 充足判定問題: CNF論理関数が与えられたとき、それが充足可能か判定する。\nある論理関数が充足可能：【定義】ある真理値割当が存在し、論理関数が真になること。\nHAMILTONPATH ∝ SAT 完全性  C-complete:任意のL' in CがLに帰着可能 closed under reductions: L ∝ L' in C PとNPは帰着に関して閉じている。  SATはNP-complete(Cookの定理)  NPの任意の問題は非決定チューリングマシンで多項式時間で解ける。 「非決定チューリングマシンのプログラムが多項式時間p(n)で状態Yで停止」 同値 「論理関数は充足可能」 つまり、NPの任意の問題がSATに帰着可能。 つまり、SATはNP-complete  SAT ∝ HAMILTONPATH ∝ TSP(D) ∝ SAT 全てNP-complete\nBin-Packing問題 前からみてくのが2-近似アルゴリズム\n万能チューリングマシンU U(M;x)=M(x), UはMの動作をまねしてる。\nThe HALTING Problem 言語H: 全てのチューリングマシンと停止する入力を符号化した文字列の集合 Hを認識するMHの存在を仮定して背理法を目指す。 ＜対角線論法で示す＞\n","permalink":"https://stardust-coder.github.io/apblog/blog/post-5/","tags":["computer science","algorithm"],"title":"算法数理メモ"},{"categories":["Web Design"],"contents":"参考にしたサイト  \u0026ldquo;Liva-HugoのGithub\u0026rdquo; \u0026ldquo;Qiita「Hugo + GitHub Pages（独自ドメイン適応）でサイトを作成・公開する」\u0026quot; \u0026ldquo;Install Hugo (Extended) Latest With Shell Script For macOS\u0026rdquo;  ","permalink":"https://stardust-coder.github.io/apblog/blog/post-1/","tags":["Web Design","Hugo"],"title":"Hugoで作ったブログサイトをGithubPagesで公開"},{"categories":["class"],"contents":"学科長の20年前の研究らしい、興味あり！\n接尾辞木 1973年 全ての接尾辞を格納したcompacted trie\ntrie（トライ）全人類知ってるん？  語源は\u0026quot;retrieval\u0026quot; あるノードの配下の全ノードは、自身に対応する文字列に共通するプレフィックス（接頭部）があり、ルート（根）には空の文字列が対応している。 Wikipedia  compacted trieってなんですか なにがコンパクトなんだろう\n接尾辞配列（suffix array) 1993年 接尾辞のポインタを辞書順にソートした配列 検索は二分探索で行える 二分探索木の高さはO(logn)だった mは検索したい文字列の長さ、一回の比較につき長さmの文字列比較なのでO(m)かかる。 -\u0026gt; 計算量はO(mlogn)\n#!/usr/bin/perl -w use strict; my $t = \u0026#34;hogehogehogege\u0026#34;;\t# この中から my @sa = (0..length($t)-1);\t# Suffix Array初期化 ### Suffix Array の作成 @sa = sort {substr($t, $a) cmp substr($t, $b)} @sa; for (0..$#sa) { print \u0026#34;$_ $sa[$_] \u0026#34;,substr($t, $sa[$_]),\u0026#34;\\n\u0026#34;; } #ポイントは、ポインタ（数字）が辞書順にソートされている ### バイナリサーチ my $k = \u0026#34;ppi\u0026#34;; #これがいる場所を探す my ($l, $u) = (0, $#sa); while ($l \u0026lt;= $u) { my $i = int(($l + $u)/2); my $c = $k cmp substr($t, $sa[$i], length($k)); if ($c \u0026gt; 0) { $l = $i + 1; } elsif ($c \u0026lt; 0) { $u = $i - 1; } else { print qq(\u0026#34;$k\u0026#34; is found at $sa[$i]\\n); last; } } 圧縮接尾辞配列(compressed suffix array)  SA の代わりに Φ[i] = SA^-1[SA[i]+1] を格納 先頭の1文字を消しても辞書順は同じ -\u0026gt; これを生かして圧縮する -\u0026gt; すご。あたまよ。  できること lookup(i): SA[i] を返す (O(log n) 時間) inverse(i): SA-1[i] を返す (O(log n) 時間) Φ[i]: SA-1[SA[i]+1] を返す(O(1) 時間) substring(i,l): T[SA[i]..SA[i]+l-1]を返す – O(l) 時間\nしくみはむずいけど、使ってみるか リンク切れてた。。。\n \n","permalink":"https://stardust-coder.github.io/apblog/blog/post-2/","tags":["algorithm","computer science"],"title":"学科長の20年前の研究"},{"categories":["Web Design"],"contents":"あけましておめでとう！ 2021年を記念にブログをつくってみました。 特に動機とかはないです。つくっただけ！ （Hugoのテンプレートに触ってみたかっただけという\u0026hellip;）\n講義で習ったこと関連のことを書くかもしれません。 内容は応用数学とかです。\nあと自分がネット上で探してもなかなかヒットしなかった情報とかを載せれたらいいかも。\nまあ、実質日記\u0026hellip;笑\n","permalink":"https://stardust-coder.github.io/apblog/blog/firstpost/","tags":["Web Design","Hugo"],"title":"ブログつくりました"}]